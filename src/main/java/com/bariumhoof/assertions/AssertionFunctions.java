package com.bariumhoof.assertions;

import com.bariumhoof.bgfx4j.enums.BGFX_CAPS;
import org.jetbrains.annotations.Contract;

import java.util.Collection;
import java.util.function.Supplier;

// todo make seperate lib that uses service
interface AssertionFunctions {

    @Contract("null -> fail")
    void requireNonNull(Object object);
    @Contract("null, _ -> fail")
    void requireNonNull(Object object, String message);
    @Contract("null, _ -> fail")
    void requireNonNull(Object object, Supplier<String> message);
    void requireBgfxInitialized(String reason);
    void require(boolean b);
    void requireIfCapEnabled(boolean b, BGFX_CAPS caps);
    void requireIfCapsEnabled(boolean b, BGFX_CAPS ... caps);
    void requireIfCapDisabled(boolean b, BGFX_CAPS caps);
    void requireIfCapsDisabled(boolean b, BGFX_CAPS ... caps);
    void requireEmpty(Collection<?> c);
    void requireEmpty(Object[] arr);
    void requireEmpty(byte[] arr);
    void requireEmpty(short[] arr);
    void requireEmpty(int[] arr);
    void requireEmpty(long[] arr);
    void requireEmpty(float[] arr);
    void requireEmpty(double[] arr);
    void requireEmpty(boolean[] arr);
    void requireEmpty(char[] arr);
    void requireNonEmpty(Collection<?> c);
    void requireNonEmpty(Object[] arr);
    void requireNonEmpty(byte[] arr);
    void requireNonEmpty(short[] arr);
    void requireNonEmpty(int[] arr);
    void requireNonEmpty(long[] arr);
    void requireNonEmpty(float[] arr);
    void requireNonEmpty(double[] arr);
    void requireNonEmpty(boolean[] arr);
    void requireNonEmpty(char[] arr);
    void requireEqualLength(Collection<?> c1, Collection<?> c2);
    void requireEqualLength(Object[] arr1, Object[] arr2);
    void requireEqualLength(Object[] arr1, byte[] arr2);
    void requireEqualLength(Object[] arr1, short[] arr2);
    void requireEqualLength(Object[] arr1, int[] arr2);
    void requireEqualLength(Object[] arr1, long[] arr2);
    void requireEqualLength(Object[] arr1, float[] arr2);
    void requireEqualLength(Object[] arr1, double[] arr2);
    void requireEqualLength(Object[] arr1, boolean[] arr2);
    void requireEqualLength(Object[] arr1, char[] arr2);
    void requireEqualLength(byte[] arr1, Object[] arr2);
    void requireEqualLength(byte[] arr1, byte[] arr2);
    void requireEqualLength(byte[] arr1, short[] arr2);
    void requireEqualLength(byte[] arr1, int[] arr2);
    void requireEqualLength(byte[] arr1, long[] arr2);
    void requireEqualLength(byte[] arr1, float[] arr2);
    void requireEqualLength(byte[] arr1, double[] arr2);
    void requireEqualLength(byte[] arr1, boolean[] arr2);
    void requireEqualLength(byte[] arr1, char[] arr2);
    void requireEqualLength(short[] arr1, Object[] arr2);
    void requireEqualLength(short[] arr1, byte[] arr2);
    void requireEqualLength(short[] arr1, short[] arr2);
    void requireEqualLength(short[] arr1, int[] arr2);
    void requireEqualLength(short[] arr1, long[] arr2);
    void requireEqualLength(short[] arr1, float[] arr2);
    void requireEqualLength(short[] arr1, double[] arr2);
    void requireEqualLength(short[] arr1, boolean[] arr2);
    void requireEqualLength(short[] arr1, char[] arr2);
    void requireEqualLength(int[] arr1, Object[] arr2);
    void requireEqualLength(int[] arr1, byte[] arr2);
    void requireEqualLength(int[] arr1, short[] arr2);
    void requireEqualLength(int[] arr1, int[] arr2);
    void requireEqualLength(int[] arr1, long[] arr2);
    void requireEqualLength(int[] arr1, float[] arr2);
    void requireEqualLength(int[] arr1, double[] arr2);
    void requireEqualLength(int[] arr1, boolean[] arr2);
    void requireEqualLength(int[] arr1, char[] arr2);
    void requireEqualLength(long[] arr1, Object[] arr2);
    void requireEqualLength(long[] arr1, byte[] arr2);
    void requireEqualLength(long[] arr1, short[] arr2);
    void requireEqualLength(long[] arr1, int[] arr2);
    void requireEqualLength(long[] arr1, long[] arr2);
    void requireEqualLength(long[] arr1, float[] arr2);
    void requireEqualLength(long[] arr1, double[] arr2);
    void requireEqualLength(long[] arr1, boolean[] arr2);
    void requireEqualLength(long[] arr1, char[] arr2);
    void requireEqualLength(float[] arr1, Object[] arr2);
    void requireEqualLength(float[] arr1, byte[] arr2);
    void requireEqualLength(float[] arr1, short[] arr2);
    void requireEqualLength(float[] arr1, int[] arr2);
    void requireEqualLength(float[] arr1, long[] arr2);
    void requireEqualLength(float[] arr1, float[] arr2);
    void requireEqualLength(float[] arr1, double[] arr2);
    void requireEqualLength(float[] arr1, boolean[] arr2);
    void requireEqualLength(float[] arr1, char[] arr2);
    void requireEqualLength(double[] arr1, Object[] arr2);
    void requireEqualLength(double[] arr1, byte[] arr2);
    void requireEqualLength(double[] arr1, short[] arr2);
    void requireEqualLength(double[] arr1, int[] arr2);
    void requireEqualLength(double[] arr1, long[] arr2);
    void requireEqualLength(double[] arr1, float[] arr2);
    void requireEqualLength(double[] arr1, double[] arr2);
    void requireEqualLength(double[] arr1, boolean[] arr2);
    void requireEqualLength(double[] arr1, char[] arr2);
    void requireEqualLength(boolean[] arr1, Object[] arr2);
    void requireEqualLength(boolean[] arr1, byte[] arr2);
    void requireEqualLength(boolean[] arr1, short[] arr2);
    void requireEqualLength(boolean[] arr1, int[] arr2);
    void requireEqualLength(boolean[] arr1, long[] arr2);
    void requireEqualLength(boolean[] arr1, float[] arr2);
    void requireEqualLength(boolean[] arr1, double[] arr2);
    void requireEqualLength(boolean[] arr1, boolean[] arr2);
    void requireEqualLength(boolean[] arr1, char[] arr2);
    void requireEqualLength(char[] arr1, Object[] arr2);
    void requireEqualLength(char[] arr1, byte[] arr2);
    void requireEqualLength(char[] arr1, short[] arr2);
    void requireEqualLength(char[] arr1, int[] arr2);
    void requireEqualLength(char[] arr1, long[] arr2);
    void requireEqualLength(char[] arr1, float[] arr2);
    void requireEqualLength(char[] arr1, double[] arr2);
    void requireEqualLength(char[] arr1, boolean[] arr2);
    void requireEqualLength(char[] arr1, char[] arr2);
    void requireNonNegative(byte n);
    void requireNonNegative(short n);
    void requireNonNegative(int n);
    void requireNonNegative(long n);
    void requireNonNegative(float n);
    void requireNonNegative(double n);
    void requireNonNegative(byte n, String message);
    void requireNonNegative(short n, String message);
    void requireNonNegative(int n, String message);
    void requireNonNegative(long n, String message);
    void requireNonNegative(float n, String message);
    void requireNonNegative(double n, String message);
    void requireNonNegative(byte n, Supplier<String> message);
    void requireNonNegative(short n, Supplier<String> message);
    void requireNonNegative(int n, Supplier<String> message);
    void requireNonNegative(long n, Supplier<String> message);
    void requireNonNegative(float n, Supplier<String> message);
    void requireNonNegative(double n, Supplier<String> message);
    void requirePositive(byte n);
    void requirePositive(short n);
    void requirePositive(int n);
    void requirePositive(long n);
    void requirePositive(float n);
    void requirePositive(double n);
    void requirePositive(byte n, String message);
    void requirePositive(short n, String message);
    void requirePositive(int n, String message);
    void requirePositive(long n, String message);
    void requirePositive(float n, String message);
    void requirePositive(double n, String message);
    void requirePositive(byte n, Supplier<String> message);
    void requirePositive(short n, Supplier<String> message);
    void requirePositive(int n, Supplier<String> message);
    void requirePositive(long n, Supplier<String> message);
    void requirePositive(float n, Supplier<String> message);
    void requirePositive(double n, Supplier<String> message);
    void requireLessThan(byte n, byte upperBoundExclusive);
    void requireLessThan(short n, short upperBoundExclusive);
    void requireLessThan(int n, int upperBoundExclusive);
    void requireLessThan(long n, long upperBoundExclusive);
    void requireLessThan(float n, float upperBoundExclusive);
    void requireLessThan(double n, double upperBoundExclusive);
    void requireLessThan(byte n, byte upperBoundExclusive, String message);
    void requireLessThan(short n, short upperBoundExclusive, String message);
    void requireLessThan(int n, int upperBoundExclusive, String message);
    void requireLessThan(long n, long upperBoundExclusive, String message);
    void requireLessThan(float n, float upperBoundExclusive, String message);
    void requireLessThan(double n, double upperBoundExclusive, String message);
    void requireLessThan(byte n, byte upperBoundExclusive, Supplier<String> message);
    void requireLessThan(short n, short upperBoundExclusive, Supplier<String> message);
    void requireLessThan(int n, int upperBoundExclusive, Supplier<String> message);
    void requireLessThan(long n, long upperBoundExclusive, Supplier<String> message);
    void requireLessThan(float n, float upperBoundExclusive, Supplier<String> message);
    void requireLessThan(double n, double upperBoundExclusive, Supplier<String> message);
    void requireGreaterThan(byte n, byte upperBoundExclusive);
    void requireGreaterThan(short n, short upperBoundExclusive);
    void requireGreaterThan(int n, int upperBoundExclusive);
    void requireGreaterThan(long n, long upperBoundExclusive);
    void requireGreaterThan(float n, float upperBoundExclusive);
    void requireGreaterThan(double n, double upperBoundExclusive);
    void requireGreaterThan(byte n, byte upperBoundExclusive, String message);
    void requireGreaterThan(short n, short upperBoundExclusive, String message);
    void requireGreaterThan(int n, int upperBoundExclusive, String message);
    void requireGreaterThan(long n, long upperBoundExclusive, String message);
    void requireGreaterThan(float n, float upperBoundExclusive, String message);
    void requireGreaterThan(double n, double upperBoundExclusive, String message);
    void requireGreaterThan(byte n, byte upperBoundExclusive, Supplier<String> message);
    void requireGreaterThan(short n, short upperBoundExclusive, Supplier<String> message);
    void requireGreaterThan(int n, int upperBoundExclusive, Supplier<String> message);
    void requireGreaterThan(long n, long upperBoundExclusive, Supplier<String> message);
    void requireGreaterThan(float n, float upperBoundExclusive, Supplier<String> message);
    void requireGreaterThan(double n, double upperBoundExclusive, Supplier<String> message);
    void requireLessThanOrEqualTo(byte n, byte upperBoundInclusive);
    void requireLessThanOrEqualTo(short n, short upperBoundInclusive);
    void requireLessThanOrEqualTo(int n, int upperBoundInclusive);
    void requireLessThanOrEqualTo(long n, long upperBoundInclusive);
    void requireLessThanOrEqualTo(float n, float upperBoundInclusive);
    void requireLessThanOrEqualTo(double n, double upperBoundInclusive);
    void requireLessThanOrEqualTo(byte n, byte upperBoundInclusive, String message);
    void requireLessThanOrEqualTo(short n, short upperBoundInclusive, String message);
    void requireLessThanOrEqualTo(int n, int upperBoundInclusive, String message);
    void requireLessThanOrEqualTo(long n, long upperBoundInclusive, String message);
    void requireLessThanOrEqualTo(float n, float upperBoundInclusive, String message);
    void requireLessThanOrEqualTo(double n, double upperBoundInclusive, String message);
    void requireLessThanOrEqualTo(byte n, byte upperBoundInclusive, Supplier<String> message);
    void requireLessThanOrEqualTo(short n, short upperBoundInclusive, Supplier<String> message);
    void requireLessThanOrEqualTo(int n, int upperBoundInclusive, Supplier<String> message);
    void requireLessThanOrEqualTo(long n, long upperBoundInclusive, Supplier<String> message);
    void requireLessThanOrEqualTo(float n, float upperBoundInclusive, Supplier<String> message);
    void requireLessThanOrEqualTo(double n, double upperBoundInclusive, Supplier<String> message);
    void requireGreaterThanOrEqualTo(byte n, byte upperBoundInclusive);
    void requireGreaterThanOrEqualTo(short n, short upperBoundInclusive);
    void requireGreaterThanOrEqualTo(int n, int upperBoundInclusive);
    void requireGreaterThanOrEqualTo(long n, long upperBoundInclusive);
    void requireGreaterThanOrEqualTo(float n, float upperBoundInclusive);
    void requireGreaterThanOrEqualTo(double n, double upperBoundInclusive);
    void requireGreaterThanOrEqualTo(byte n, byte upperBoundInclusive, String message);
    void requireGreaterThanOrEqualTo(short n, short upperBoundInclusive, String message);
    void requireGreaterThanOrEqualTo(int n, int upperBoundInclusive, String message);
    void requireGreaterThanOrEqualTo(long n, long upperBoundInclusive, String message);
    void requireGreaterThanOrEqualTo(float n, float upperBoundInclusive, String message);
    void requireGreaterThanOrEqualTo(double n, double upperBoundInclusive, String message);
    void requireGreaterThanOrEqualTo(byte n, byte upperBoundInclusive, Supplier<String> message);
    void requireGreaterThanOrEqualTo(short n, short upperBoundInclusive, Supplier<String> message);
    void requireGreaterThanOrEqualTo(int n, int upperBoundInclusive, Supplier<String> message);
    void requireGreaterThanOrEqualTo(long n, long upperBoundInclusive, Supplier<String> message);
    void requireGreaterThanOrEqualTo(float n, float upperBoundInclusive, Supplier<String> message);
    void requireGreaterThanOrEqualTo(double n, double upperBoundInclusive, Supplier<String> message);

}
